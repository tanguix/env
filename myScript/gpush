
#!/bin/sh
# Make script work in all POSIX shells

# Error handling and cleanup function
cleanup() {
    exit_code=$?
    current_sha=$1
    push_attempted=$2
    
    if [ $exit_code -ne 0 ]; then
        printf "\n\033[0;31mAn error occurred. Starting cleanup...\033[0m\n"
        
        if [ "$push_attempted" = "true" ]; then
            # If pushing was attempted but failed, keep the commit but inform the user
            printf "\033[0;33mYour changes were committed but not pushed.\033[0m\n"
            printf "You can try pushing later with: git push\n"
        else
            # Check if we have staged changes
            if git diff --staged --quiet; then
                printf "No changes staged, no cleanup needed\n"
            else
                printf "Unstaging changes...\n"
                git reset
            fi
            
            # Check if we created a new commit
            if [ "$(git rev-parse HEAD)" != "$current_sha" ]; then
                printf "Reverting to previous commit...\n"
                git reset --hard $current_sha
            fi
            
            printf "\033[0;32mCleanup complete. Changes are preserved but unstaged.\033[0m\n"
        fi
    fi
    
    # Remove temporary files if they exist
    rm -f /tmp/git_commit_msg_$$
    
    exit $exit_code
}

# Set strict error handling
set -e

# Store initial state
initial_sha=$(git rev-parse HEAD || echo "")

# Initialize push_attempted flag
push_attempted=false

# Set up cleanup trap for interrupts and errors
trap 'cleanup "$initial_sha" "$push_attempted"' INT TERM EXIT

# Get repository information
repo_url=$(git config --get remote.origin.url || {
    printf "\033[0;31mError: Not a git repository or no remote 'origin' set\033[0m\n"
    exit 1
})

# Extract username and repository name with error checking
username=$(echo "$repo_url" | cut -d'/' -f4 || echo "unknown")
repo_name=$(echo "$repo_url" | cut -d'/' -f5 | cut -d'.' -f1 || echo "unknown")

# Get current branch with error checking
current_branch=$(git rev-parse --abbrev-ref HEAD || {
    printf "\033[0;31mError: Unable to determine current branch\033[0m\n"
    exit 1
})

# Branch warning
if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then 
    printf "\n\033[1;33mWARNING: You are on branch '%s' NOT MAIN OR MASTER\033[0m\n" "$current_branch"
    printf "Continue? (y/n): "
    read -r REPLY
    case "$REPLY" in
        [Yy]) printf "\n";;
        *) printf "Operation cancelled\n"; exit 0;;
    esac
fi

# Display current status
printf "Repository: \033[0;32m'%s/%s'\033[0m\n" "$username" "$repo_name"
printf "Branch: \033[0;32m'%s'\033[0m\n" "$current_branch"
printf "\nCurrent status:\n"
git status || {
    printf "\033[0;31mError: Unable to get repository status\033[0m\n"
    exit 1
}

# Check for unpushed commits
unpushed_commits=$(git log @{u}.. 2>/dev/null)
has_changes=false

# Check for unstaged changes or untracked files
if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    has_changes=true
fi

# If no changes and no unpushed commits, exit
if [ -z "$unpushed_commits" ] && [ "$has_changes" = "false" ]; then
    printf "\033[1;33mNo changes or unpushed commits found\033[0m\n"
    exit 0
fi

# Show summary of what will be pushed
if [ -n "$unpushed_commits" ]; then
    commit_count=$(git log @{u}.. --oneline | wc -l)
    printf "\n\033[1;33mUnpushed commits (%d):\033[0m\n" "$commit_count"
    git log @{u}.. --oneline
fi

# Ask for confirmation to push changes
printf "\n\033[0;34mPush"
if [ "$has_changes" = "true" ]; then
    printf " (including new changes)"
fi
printf "? (y/n): \033[0m"
read -r REPLY

case "$REPLY" in
    [Yy])
        if [ "$has_changes" = "true" ]; then
            # Stage changes with error checking
            printf "\033[0;34mStaging changes...\033[0m\n"
            git add . || {
                printf "\033[0;31mError: Failed to stage changes\033[0m\n"
                exit 1
            }
            
            # Get commit message with extra newline and yellow color for visibility
            printf "\nEnter commit message (press Enter when done):\n"
            printf "\033[1;33m"  # Set color to yellow
            read -r commit_message
            printf "\033[0m"     # Reset color back to default
            
            # Check if commit message is empty
            if [ -z "$commit_message" ]; then
                printf "\033[0;31mError: Commit message cannot be empty\033[0m\n"
                exit 1
            fi
            
            # Commit changes
            printf "Committing changes...\n"
            git commit -m "$commit_message" || {
                printf "\033[0;31mError: Failed to commit changes\033[0m\n"
                exit 1
            }
        fi
        
        # Set push_attempted flag to true before pushing
        push_attempted=true
        
        # Push changes with retry logic
        max_retries=3
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
            printf "Attempting to push changes (attempt %d/%d)...\n" "$((retry_count + 1))" "$max_retries"
            if git push -u origin "$current_branch"; then
                printf "\033[0;32mSuccessfully pushed changes!\033[0m\n\n"
                exit 0
            else
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                    printf "\033[1;33mPush failed, retrying in 5 seconds...\033[0m\n"
                    sleep 5
                fi
            fi
        done
        
        printf "\033[0;31mFailed to push after %d attempts\033[0m\n" "$max_retries"
        printf "Your changes are committed locally but not pushed.\n"
        printf "You can try pushing later with: git push\n"
        exit 1
        ;;
        
    [Nn])
        printf "No changes pushed\n"
        exit 0
        ;;
        
    *)
        printf "\033[0;31mInvalid input. Operation cancelled.\033[0m\n"
        exit 1
        ;;
esac
